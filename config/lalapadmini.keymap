#include <input/processors.dtsi>
#include <dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform INPUT_TRANSFORM_X_INVERT>,
        //<&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,,,,
        <&zip_xy_scaler 6 5>,
        // デフォルトレイヤー: 左クリック,,
        //<&zip_button_behaviors &mkp MB1>;,,
        //<&zip_button_behaviors &mouse_click>;,,
        <&zip_temp_layer MOUSE_R_LAYER 300>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_X_INVERT>,
            //<&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,,,,
            <&zip_xy_scaler 3 5>,
            <&zip_temp_layer MOUSE_R_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            //<&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,,,,
            <&zip_scroll_scaler 1 32>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform INPUT_TRANSFORM_X_INVERT>,
        //<&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,,,,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_L_LAYER 300>;

    lowspeedmode {
        layers = <TERTIARY_LAYER>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_X_INVERT>,
            //<&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,,,,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            //<&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,,,,
            <&zip_scroll_scaler 1 32>;
    };
};

&mt {
    quick-tap-ms = <0>;
    flavor = "balanced";
};

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tap_dance_layer_1and2: tap_dance_layer_1and2 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_mo12";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };

        layer_mkp: layer_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mouse_click: mouse_click {
            compatible = "zmk,behavior-tap-dance";
            label = "MOUSE_CLICK";
            #binding-cells = <0>;
            bindings = <&mkp MB1>, <&mouse_click_macro>, <&mkp MB2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CONBO_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        COMBO_TAB {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        CapsLock {
            bindings = <&kp LS(CAPSLOCK)>;
            key-positions = <20 21>;
        };
    };

    macros {
        MACRO_LTAP: MACRO_LTAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>;
            label = "MACRO_LTAP";
        };

        mouse_click_macro: mouse_click_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1>;
            label = "MOUSE_CLICK_MACRO";
        };
    };

    input_processors {
        zip_right_click_trigger_paste: zip_right_click_trigger_paste {
            compatible = "zmk,input-processor-behaviors";
            #input-processor-cells = <0>;
            codes = <INPUT_BTN_1>;
            bindings = <&kp LC(V)  >;

            //bindings = <&mouse_click>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_down_up>, <&scroll_up_down>;

            bindings = <
&lt 3 Q           &lt 3 W           &lt 3 E  &lt 2 R    &lt 1 T      &lt 1 Y        &lt 2 U     &lt 3 I   &kp O             &kp P
&mt LEFT_SHIFT A  &mt LEFT_SHIFT S  &lt 3 D  &lt 2 F    &lt 1 G      &lt 1 H        &lt 2 J     &lt 3 K   &kp L             &mkp MB4
&mt LEFT_SHIFT Z  &mt LEFT_SHIFT X  &lt 3 C  &lt 2 V    &lt 1 B      &lt 1 N        &lt 2 M     &mkp MB1  &layer_mkp 5 MB2  &mkp MB3
&kp LCTRL         &kp LEFT_ALT               &kp SPACE  &lt 3 ENTER  &kp BACKSPACE  &kp DELETE            &to 3             &mkp MB5
            >;
        };

        SECONDARY_LAYER {
            display-name = "secondary_layer";
            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;

            bindings = <
&kp F1                   &kp F2        &kp F3      &kp F4                   &kp F5             &kp F6         &kp F7                &kp F8             &kp F9         &kp F10
&kp EXCLAMATION          &kp QUESTION  &kp DOLLAR  &kp AT_SIGN              &kp AMPERSAND      &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE    &kp PIPE       &kp LEFT_BRACKET
&kp INT_YEN              &kp PERCENT   &kp HASH    &kp PERIOD               &kp SEMICOLON      &kp LESS_THAN  &kp GREATER_THAN      &kp RIGHT_BRACKET  &kp BACKSLASH  &kp F11
&kp LS(INTERNATIONAL_3)  &kp CARET                 &kp LS(INTERNATIONAL_1)  &kp DOUBLE_QUOTES  &trans         &trans                                   &kp COMMA      &kp F12
            >;
        };

        TERTIARY_LAYER {
            display-name = "tertiary_layer";
            bindings = <
&kp ESCAPE            &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp UNDERSCORE  &kp N7  &kp N8  &kp N9  &kp SLASH   &kp DOUBLE_QUOTES
&kp TAB               &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp AMPERSAND   &kp N4  &kp N5  &kp N6  &kp PERIOD  &kp MINUS
&mt LEFT_SHIFT TILDE  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp COLON       &kp N1  &kp N2  &kp N3  &kp N0      &kp EQUAL
&kp DOUBLE_QUOTES     &kp KP_NUMBER_0                   &kp SPACE        &kp ENTER       &trans  &trans          &kp MINUS   &kp COLON
            >;

            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            sensor-bindings = <&volume_up_down>, <&volume_up_down>;

            bindings = <
&kp ESCAPE               &kp GRAVE     &kp LS(CAPS)  &kp LC(R)  &trans       &kp MINUS   &kp INS        &kp HOME        &kp PRINTSCREEN  &kp END
&kp TAB                  &kp LG(S)     &kp LC(Z)     &kp LC(Y)  &bootloader  &kp COMMA   &kp SEMICOLON  &kp PAGE_UP     &kp UP_ARROW     &kp PAGE_DOWN
&mt LEFT_SHIFT LS(CAPS)  &kp LC(X)     &kp LC(C)     &kp LC(V)  &bootloader  &kp PERIOD  &kp SQT        &kp LEFT_ARROW  &kp DOWN_ARROW   &kp RIGHT_ARROW
&kp LEFT_CONTROL         &kp LEFT_ALT                &trans     &trans       &trans      &trans                         &to 0            &kp LC(A)
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans       &mkp MCLK  &trans     &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans  &trans  &MACRO_LTAP  &mkp LCLK  &mkp RCLK  &mo 5
&trans  &trans  &trans  &trans  &trans  &trans  &mkp MB4     &none      &mkp MB5   &trans
&trans  &trans          &trans  &trans  &trans  &trans                  &trans     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans          &trans          &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans  &trans       &mkp MCLK  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&mo 7   &MACRO_LTAP  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mkp MB4     &trans     &mkp MB5   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                  &trans     &trans  &trans  &trans          &trans  &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
